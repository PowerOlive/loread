package me.wizos.loread.bean;

import de.greenrobot.dao.DaoException;
import me.wizos.loread.data.dao.ArticleDao;
import me.wizos.loread.data.dao.DaoSession;
import me.wizos.loread.data.dao.FeedDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ARTICLE".
 */
public class Article {

    /** Not-null value. */
    private String id;
    private Long crawlTimeMsec;
    private Long timestampUsec;
    private String categories;
    private String title;
    private Long published;
    private Long updated;
    private String enclosure;
    private String canonical;
    private String alternate;
    private String summary;
    private String author;
    private String readState;
    private String starState;
    private String saveDir;
    private String imgState;
    private String coverSrc;
    private String originStreamId;
    private String originTitle;
    private String originHtmlUrl;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ArticleDao myDao;

    private Feed feed;
    private String feed__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Article() {
    }

    public Article(String id) {
        this.id = id;
    }

    public Article(String id, Long crawlTimeMsec, Long timestampUsec, String categories, String title, Long published, Long updated, String enclosure, String canonical, String alternate, String summary, String author, String readState, String starState, String saveDir, String imgState, String coverSrc, String originStreamId, String originTitle, String originHtmlUrl) {
        this.id = id;
        this.crawlTimeMsec = crawlTimeMsec;
        this.timestampUsec = timestampUsec;
        this.categories = categories;
        this.title = title;
        this.published = published;
        this.updated = updated;
        this.enclosure = enclosure;
        this.canonical = canonical;
        this.alternate = alternate;
        this.summary = summary;
        this.author = author;
        this.readState = readState;
        this.starState = starState;
        this.saveDir = saveDir;
        this.imgState = imgState;
        this.coverSrc = coverSrc;
        this.originStreamId = originStreamId;
        this.originTitle = originTitle;
        this.originHtmlUrl = originHtmlUrl;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getArticleDao() : null;
    }

    /** Not-null value. */
    public String getId() {
        return id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(String id) {
        this.id = id;
    }

    public Long getCrawlTimeMsec() {
        return crawlTimeMsec;
    }

    public void setCrawlTimeMsec(Long crawlTimeMsec) {
        this.crawlTimeMsec = crawlTimeMsec;
    }

    public Long getTimestampUsec() {
        return timestampUsec;
    }

    public void setTimestampUsec(Long timestampUsec) {
        this.timestampUsec = timestampUsec;
    }

    public String getCategories() {
        return categories;
    }

    public void setCategories(String categories) {
        this.categories = categories;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Long getPublished() {
        return published;
    }

    public void setPublished(Long published) {
        this.published = published;
    }

    public Long getUpdated() {
        return updated;
    }

    public void setUpdated(Long updated) {
        this.updated = updated;
    }

    public String getEnclosure() {
        return enclosure;
    }

    public void setEnclosure(String enclosure) {
        this.enclosure = enclosure;
    }

    public String getCanonical() {
        return canonical;
    }

    public void setCanonical(String canonical) {
        this.canonical = canonical;
    }

    public String getAlternate() {
        return alternate;
    }

    public void setAlternate(String alternate) {
        this.alternate = alternate;
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getReadState() {
        return readState;
    }

    public void setReadState(String readState) {
        this.readState = readState;
    }

    public String getStarState() {
        return starState;
    }

    public void setStarState(String starState) {
        this.starState = starState;
    }

    public String getSaveDir() {
        return saveDir;
    }

    public void setSaveDir(String saveDir) {
        this.saveDir = saveDir;
    }

    public String getImgState() {
        return imgState;
    }

    public void setImgState(String imgState) {
        this.imgState = imgState;
    }

    public String getCoverSrc() {
        return coverSrc;
    }

    public void setCoverSrc(String coverSrc) {
        this.coverSrc = coverSrc;
    }

    public String getOriginStreamId() {
        return originStreamId;
    }

    public void setOriginStreamId(String originStreamId) {
        this.originStreamId = originStreamId;
    }

    public String getOriginTitle() {
        return originTitle;
    }

    public void setOriginTitle(String originTitle) {
        this.originTitle = originTitle;
    }

    public String getOriginHtmlUrl() {
        return originHtmlUrl;
    }

    public void setOriginHtmlUrl(String originHtmlUrl) {
        this.originHtmlUrl = originHtmlUrl;
    }

    /** To-one relationship, resolved on first access. */
    public Feed getFeed() {
        String __key = this.categories;
        if (feed__resolvedKey == null || feed__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeedDao targetDao = daoSession.getFeedDao();
            Feed feedNew = targetDao.load(__key);
            synchronized (this) {
                feed = feedNew;
            	feed__resolvedKey = __key;
            }
        }
        return feed;
    }

    public void setFeed(Feed feed) {
        synchronized (this) {
            this.feed = feed;
            categories = feed == null ? null : feed.getId();
            feed__resolvedKey = categories;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
