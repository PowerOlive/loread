package me.wizos.loread.bean;

import java.util.List;
import me.wizos.loread.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import me.wizos.loread.dao.ArticleDao;
import me.wizos.loread.dao.FeedDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "FEED".
 */
public class Feed {

    /** Not-null value. */
    private String id;
    /** Not-null value. */
    private String title;
    private String categoryid;
    private String categorylabel;
    private String sortid;
    private Long firstitemmsec;
    private String url;
    private String htmlurl;
    private String iconurl;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FeedDao myDao;

    private List<Article> items;

    public Feed() {
    }

    public Feed(String id) {
        this.id = id;
    }

    public Feed(String id, String title, String categoryid, String categorylabel, String sortid, Long firstitemmsec, String url, String htmlurl, String iconurl) {
        this.id = id;
        this.title = title;
        this.categoryid = categoryid;
        this.categorylabel = categorylabel;
        this.sortid = sortid;
        this.firstitemmsec = firstitemmsec;
        this.url = url;
        this.htmlurl = htmlurl;
        this.iconurl = iconurl;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFeedDao() : null;
    }

    /** Not-null value. */
    public String getId() {
        return id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(String id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public String getCategoryid() {
        return categoryid;
    }

    public void setCategoryid(String categoryid) {
        this.categoryid = categoryid;
    }

    public String getCategorylabel() {
        return categorylabel;
    }

    public void setCategorylabel(String categorylabel) {
        this.categorylabel = categorylabel;
    }

    public String getSortid() {
        return sortid;
    }

    public void setSortid(String sortid) {
        this.sortid = sortid;
    }

    public Long getFirstitemmsec() {
        return firstitemmsec;
    }

    public void setFirstitemmsec(Long firstitemmsec) {
        this.firstitemmsec = firstitemmsec;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getHtmlurl() {
        return htmlurl;
    }

    public void setHtmlurl(String htmlurl) {
        this.htmlurl = htmlurl;
    }

    public String getIconurl() {
        return iconurl;
    }

    public void setIconurl(String iconurl) {
        this.iconurl = iconurl;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Article> getItems() {
        if (items == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleDao targetDao = daoSession.getArticleDao();
            List<Article> itemsNew = targetDao._queryFeed_Items(id);
            synchronized (this) {
                if(items == null) {
                    items = itemsNew;
                }
            }
        }
        return items;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetItems() {
        items = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
