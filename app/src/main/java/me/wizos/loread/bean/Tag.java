package me.wizos.loread.bean;

import com.google.gson.annotations.SerializedName;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.OrderBy;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

import me.wizos.loread.data.dao.DaoSession;
import me.wizos.loread.data.dao.FeedDao;
import me.wizos.loread.data.dao.TagDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "TAG".
 */
@Entity(active = true)
public class Tag {

    @SerializedName("id")
    @Id
    @NotNull
    private String id;

    @SerializedName("sortid")
    @NotNull
    private String sortid;
    @SerializedName("title")
    private String title;

    /**
     * Used to resolve relations
     */
    @Generated
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    @Generated
    private transient TagDao myDao;

    @ToMany(joinProperties = {
            @JoinProperty(name = "id", referencedName = "categoryid")
    })
    @OrderBy("categoryid DESC")
    private List<Feed> feeds;

    // KEEP FIELDS - put your custom fields here
//    @SerializedName("id")
//    private String id;
//    @SerializedName("sortid")
//    private String sortid;
//    @SerializedName("title")
//    private String title;
//    @SerializedName("unreadcount")
//    private Integer unreadcount;
    // KEEP FIELDS END

    @Generated
    public Tag() {
    }

    public Tag(String id) {
        this.id = id;
    }

    @Generated
    public Tag(String id, String sortid, String title) {
        this.id = id;
        this.sortid = sortid;
        this.title = title;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTagDao() : null;
    }

    @NotNull
    public String getId() {
        return id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setId(@NotNull String id) {
        this.id = id;
    }

    @NotNull
    public String getSortid() {
        return sortid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSortid(@NotNull String sortid) {
        this.sortid = sortid;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Feed> getFeeds() {
        if (feeds == null) {
            __throwIfDetached();
            FeedDao targetDao = daoSession.getFeedDao();
            List<Feed> feedsNew = targetDao._queryTag_Feeds(id);
            synchronized (this) {
                if(feeds == null) {
                    feeds = feedsNew;
                }
            }
        }
        return feeds;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetFeeds() {
        feeds = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
