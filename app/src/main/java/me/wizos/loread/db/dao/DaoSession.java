package me.wizos.loread.db.dao;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.Map;

import me.wizos.loread.db.Article;
import me.wizos.loread.db.Feed;
import me.wizos.loread.db.Tag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 *
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig articleDaoConfig;
    private final DaoConfig feedDaoConfig;
    private final DaoConfig tagDaoConfig;

    private final ArticleDao articleDao;
    private final FeedDao feedDao;
    private final TagDao tagDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        articleDaoConfig = daoConfigMap.get(ArticleDao.class).clone();
        articleDaoConfig.initIdentityScope(type);

        feedDaoConfig = daoConfigMap.get(FeedDao.class).clone();
        feedDaoConfig.initIdentityScope(type);

        tagDaoConfig = daoConfigMap.get(TagDao.class).clone();
        tagDaoConfig.initIdentityScope(type);

        articleDao = new ArticleDao(articleDaoConfig, this);
        feedDao = new FeedDao(feedDaoConfig, this);
        tagDao = new TagDao(tagDaoConfig, this);

        registerDao(Article.class, articleDao);
        registerDao(Feed.class, feedDao);
        registerDao(Tag.class, tagDao);
    }

    public void clear() {
        articleDaoConfig.clearIdentityScope();
        feedDaoConfig.clearIdentityScope();
        tagDaoConfig.clearIdentityScope();
    }

    public ArticleDao getArticleDao() {
        return articleDao;
    }

    public FeedDao getFeedDao() {
        return feedDao;
    }

    public TagDao getTagDao() {
        return tagDao;
    }

}
