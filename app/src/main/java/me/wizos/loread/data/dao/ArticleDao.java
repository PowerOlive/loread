package me.wizos.loread.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import me.wizos.loread.bean.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE".
*/
public class ArticleDao extends AbstractDao<Article, String> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrawlTimeMsec = new Property(1, Long.class, "crawlTimeMsec", false, "CRAWL_TIME_MSEC");
        public final static Property TimestampUsec = new Property(2, Long.class, "timestampUsec", false, "TIMESTAMP_USEC");
        public final static Property Categories = new Property(3, String.class, "categories", false, "CATEGORIES");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Published = new Property(5, Long.class, "published", false, "PUBLISHED");
        public final static Property Updated = new Property(6, Long.class, "updated", false, "UPDATED");
        public final static Property Starred = new Property(7, Long.class, "starred", false, "STARRED");
        public final static Property Enclosure = new Property(8, String.class, "enclosure", false, "ENCLOSURE");
        public final static Property Canonical = new Property(9, String.class, "canonical", false, "CANONICAL");
        public final static Property Alternate = new Property(10, String.class, "alternate", false, "ALTERNATE");
        public final static Property Summary = new Property(11, String.class, "summary", false, "SUMMARY");
        public final static Property Author = new Property(12, String.class, "author", false, "AUTHOR");
        public final static Property ReadState = new Property(13, String.class, "readState", false, "READ_STATE");
        public final static Property StarState = new Property(14, String.class, "starState", false, "STAR_STATE");
        public final static Property SaveDir = new Property(15, String.class, "saveDir", false, "SAVE_DIR");
        public final static Property ImgState = new Property(16, String.class, "imgState", false, "IMG_STATE");
        public final static Property CoverSrc = new Property(17, String.class, "coverSrc", false, "COVER_SRC");
        public final static Property OriginStreamId = new Property(18, String.class, "originStreamId", false, "ORIGIN_STREAM_ID");
        public final static Property OriginTitle = new Property(19, String.class, "originTitle", false, "ORIGIN_TITLE");
        public final static Property OriginHtmlUrl = new Property(20, String.class, "originHtmlUrl", false, "ORIGIN_HTML_URL");
    }

    private Query<Article> feed_ItemsQuery;

    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRAWL_TIME_MSEC\" INTEGER," + // 1: crawlTimeMsec
                "\"TIMESTAMP_USEC\" INTEGER," + // 2: timestampUsec
                "\"CATEGORIES\" TEXT," + // 3: categories
                "\"TITLE\" TEXT," + // 4: title
                "\"PUBLISHED\" INTEGER," + // 5: published
                "\"UPDATED\" INTEGER," + // 6: updated
                "\"STARRED\" INTEGER," + // 7: starred
                "\"ENCLOSURE\" TEXT," + // 8: enclosure
                "\"CANONICAL\" TEXT," + // 9: canonical
                "\"ALTERNATE\" TEXT," + // 10: alternate
                "\"SUMMARY\" TEXT," + // 11: summary
                "\"AUTHOR\" TEXT," + // 12: author
                "\"READ_STATE\" TEXT," + // 13: readState
                "\"STAR_STATE\" TEXT," + // 14: starState
                "\"SAVE_DIR\" TEXT," + // 15: saveDir
                "\"IMG_STATE\" TEXT," + // 16: imgState
                "\"COVER_SRC\" TEXT," + // 17: coverSrc
                "\"ORIGIN_STREAM_ID\" TEXT," + // 18: originStreamId
                "\"ORIGIN_TITLE\" TEXT," + // 19: originTitle
                "\"ORIGIN_HTML_URL\" TEXT);"); // 20: originHtmlUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        Long crawlTimeMsec = entity.getCrawlTimeMsec();
        if (crawlTimeMsec != null) {
            stmt.bindLong(2, crawlTimeMsec);
        }
 
        Long timestampUsec = entity.getTimestampUsec();
        if (timestampUsec != null) {
            stmt.bindLong(3, timestampUsec);
        }
 
        String categories = entity.getCategories();
        if (categories != null) {
            stmt.bindString(4, categories);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        Long published = entity.getPublished();
        if (published != null) {
            stmt.bindLong(6, published);
        }
 
        Long updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(7, updated);
        }

        Long starred = entity.getStarred();
        if (starred != null) {
            stmt.bindLong(8, starred);
        }
 
        String enclosure = entity.getEnclosure();
        if (enclosure != null) {
            stmt.bindString(9, enclosure);
        }
 
        String canonical = entity.getCanonical();
        if (canonical != null) {
            stmt.bindString(10, canonical);
        }
 
        String alternate = entity.getAlternate();
        if (alternate != null) {
            stmt.bindString(11, alternate);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(12, summary);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(13, author);
        }
 
        String readState = entity.getReadState();
        if (readState != null) {
            stmt.bindString(14, readState);
        }
 
        String starState = entity.getStarState();
        if (starState != null) {
            stmt.bindString(15, starState);
        }

        String saveDir = entity.getSaveDir();
        if (saveDir != null) {
            stmt.bindString(16, saveDir);
        }
 
        String imgState = entity.getImgState();
        if (imgState != null) {
            stmt.bindString(17, imgState);
        }
 
        String coverSrc = entity.getCoverSrc();
        if (coverSrc != null) {
            stmt.bindString(18, coverSrc);
        }

        String originStreamId = entity.getOriginStreamId();
        if (originStreamId != null) {
            stmt.bindString(19, originStreamId);
        }

        String originTitle = entity.getOriginTitle();
        if (originTitle != null) {
            stmt.bindString(20, originTitle);
        }

        String originHtmlUrl = entity.getOriginHtmlUrl();
        if (originHtmlUrl != null) {
            stmt.bindString(21, originHtmlUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // crawlTimeMsec
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // timestampUsec
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // categories
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // published
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // updated
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // starred
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // enclosure
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // canonical
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // alternate
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // summary
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // author
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // readState
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // starState
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // saveDir
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // imgState
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // coverSrc
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // originStreamId
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // originTitle
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // originHtmlUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setCrawlTimeMsec(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTimestampUsec(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCategories(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublished(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUpdated(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStarred(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setEnclosure(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCanonical(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAlternate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSummary(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAuthor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setReadState(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStarState(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSaveDir(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImgState(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCoverSrc(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOriginStreamId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOriginTitle(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOriginHtmlUrl(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Article entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of Feed. */
    public List<Article> _queryFeed_Items(String categories) {
        synchronized (this) {
            if (feed_ItemsQuery == null) {
                QueryBuilder<Article> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Categories.eq(null));
                queryBuilder.orderRaw("T.'TIMESTAMP_USEC' DESC");
                feed_ItemsQuery = queryBuilder.build();
            }
        }
        Query<Article> query = feed_ItemsQuery.forCurrentThread();
        query.setParameter(0, categories);
        return query.list();
    }

}
