package me.wizos.loread.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import me.wizos.loread.bean.Statistic;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STATISTIC".
 */
public class StatisticDao extends AbstractDao<Statistic, String> {

    public static final String TABLENAME = "STATISTIC";

    /**
     * Properties of entity Statistic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Unread = new Property(1, Integer.class, "unread", false, "UNREAD");
        public final static Property Stared = new Property(2, Integer.class, "stared", false, "STARED");
        public final static Property Sum = new Property(3, Integer.class, "sum", false, "SUM");
        public final static Property NewestItemTimestampUsec = new Property(4, Long.class, "newestItemTimestampUsec", false, "NEWEST_ITEM_TIMESTAMP_USEC");
    }


    public StatisticDao(DaoConfig config) {
        super(config);
    }

    public StatisticDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATISTIC\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"UNREAD\" INTEGER," + // 1: unread
                "\"STARED\" INTEGER," + // 2: stared
                "\"SUM\" INTEGER," + // 3: sum
                "\"NEWEST_ITEM_TIMESTAMP_USEC\" INTEGER);"); // 4: newestItemTimestampUsec
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATISTIC\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Statistic entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());

        Integer unread = entity.getUnread();
        if (unread != null) {
            stmt.bindLong(2, unread);
        }

        Integer stared = entity.getStared();
        if (stared != null) {
            stmt.bindLong(3, stared);
        }

        Integer sum = entity.getSum();
        if (sum != null) {
            stmt.bindLong(4, sum);
        }

        Long newestItemTimestampUsec = entity.getNewestItemTimestampUsec();
        if (newestItemTimestampUsec != null) {
            stmt.bindLong(5, newestItemTimestampUsec);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Statistic readEntity(Cursor cursor, int offset) {
        Statistic entity = new Statistic( //
                cursor.getString(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // unread
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // stared
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // sum
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // newestItemTimestampUsec
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Statistic entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setUnread(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStared(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNewestItemTimestampUsec(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Statistic entity, long rowId) {
        return entity.getId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Statistic entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
