package me.wizos.loread.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

import me.wizos.loread.bean.Feed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEED".
*/
public class FeedDao extends AbstractDao<Feed, String> {

    public static final String TABLENAME = "FEED";

    /**
     * Properties of entity Feed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Categoryid = new Property(2, String.class, "categoryid", false, "CATEGORYID");
        public final static Property Categorylabel = new Property(3, String.class, "categorylabel", false, "CATEGORYLABEL");
        public final static Property Sortid = new Property(4, String.class, "sortid", false, "SORTID");
        public final static Property Firstitemmsec = new Property(5, Long.class, "firstitemmsec", false, "FIRSTITEMMSEC");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Htmlurl = new Property(7, String.class, "htmlurl", false, "HTMLURL");
        public final static Property Iconurl = new Property(8, String.class, "iconurl", false, "ICONURL");
    }

    private DaoSession daoSession;

    private Query<Feed> tag_FeedsQuery;

    public FeedDao(DaoConfig config) {
        super(config);
    }
    
    public FeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEED\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"CATEGORYID\" TEXT," + // 2: categoryid
                "\"CATEGORYLABEL\" TEXT," + // 3: categorylabel
                "\"SORTID\" TEXT," + // 4: sortid
                "\"FIRSTITEMMSEC\" INTEGER," + // 5: firstitemmsec
                "\"URL\" TEXT," + // 6: url
                "\"HTMLURL\" TEXT," + // 7: htmlurl
                "\"ICONURL\" TEXT);"); // 8: iconurl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEED\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Feed entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());
 
        String categoryid = entity.getCategoryid();
        if (categoryid != null) {
            stmt.bindString(3, categoryid);
        }
 
        String categorylabel = entity.getCategorylabel();
        if (categorylabel != null) {
            stmt.bindString(4, categorylabel);
        }
 
        String sortid = entity.getSortid();
        if (sortid != null) {
            stmt.bindString(5, sortid);
        }
 
        Long firstitemmsec = entity.getFirstitemmsec();
        if (firstitemmsec != null) {
            stmt.bindLong(6, firstitemmsec);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String htmlurl = entity.getHtmlurl();
        if (htmlurl != null) {
            stmt.bindString(8, htmlurl);
        }
 
        String iconurl = entity.getIconurl();
        if (iconurl != null) {
            stmt.bindString(9, iconurl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Feed entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());

        String categoryid = entity.getCategoryid();
        if (categoryid != null) {
            stmt.bindString(3, categoryid);
        }

        String categorylabel = entity.getCategorylabel();
        if (categorylabel != null) {
            stmt.bindString(4, categorylabel);
        }

        String sortid = entity.getSortid();
        if (sortid != null) {
            stmt.bindString(5, sortid);
        }

        Long firstitemmsec = entity.getFirstitemmsec();
        if (firstitemmsec != null) {
            stmt.bindLong(6, firstitemmsec);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }

        String htmlurl = entity.getHtmlurl();
        if (htmlurl != null) {
            stmt.bindString(8, htmlurl);
        }

        String iconurl = entity.getIconurl();
        if (iconurl != null) {
            stmt.bindString(9, iconurl);
        }
    }

    @Override
    protected final void attachEntity(Feed entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Feed readEntity(Cursor cursor, int offset) {
        Feed entity = new Feed( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoryid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // categorylabel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sortid
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // firstitemmsec
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // htmlurl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // iconurl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Feed entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setCategoryid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategorylabel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSortid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstitemmsec(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHtmlurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIconurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Feed entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Feed entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Feed entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "feeds" to-many relationship of Tag. */
    public List<Feed> _queryTag_Feeds(String categoryid) {
        synchronized (this) {
            if (tag_FeedsQuery == null) {
                QueryBuilder<Feed> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Categoryid.eq(null));
                queryBuilder.orderRaw("T.'CATEGORYID' DESC");
                tag_FeedsQuery = queryBuilder.build();
            }
        }
        Query<Feed> query = tag_FeedsQuery.forCurrentThread();
        query.setParameter(0, categoryid);
        return query.list();
    }

}
