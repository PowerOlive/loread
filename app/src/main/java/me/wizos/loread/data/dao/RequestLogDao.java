package me.wizos.loread.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.wizos.loread.bean.RequestLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REQUEST_LOG".
*/
public class RequestLogDao extends AbstractDao<RequestLog, Long> {

    public static final String TABLENAME = "REQUEST_LOG";

    /**
     * Properties of entity RequestLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LogTime = new Property(0, long.class, "logTime", true, "LOG_TIME");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Method = new Property(2, String.class, "method", false, "METHOD");
        public final static Property HeadParamString = new Property(3, String.class, "headParamString", false, "HEAD_PARAM_STRING");
        public final static Property BodyParamString = new Property(4, String.class, "bodyParamString", false, "BODY_PARAM_STRING");
    };


    public RequestLogDao(DaoConfig config) {
        super(config);
    }
    
    public RequestLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REQUEST_LOG\" (" + //
                "\"LOG_TIME\" INTEGER PRIMARY KEY NOT NULL ," + // 0: logTime
                "\"URL\" TEXT," + // 1: url
                "\"METHOD\" TEXT," + // 2: method
                "\"HEAD_PARAM_STRING\" TEXT," + // 3: headParamString
                "\"BODY_PARAM_STRING\" TEXT);"); // 4: bodyParamString
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REQUEST_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RequestLog entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLogTime());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
 
        String headParamString = entity.getHeadParamString();
        if (headParamString != null) {
            stmt.bindString(4, headParamString);
        }
 
        String bodyParamString = entity.getBodyParamString();
        if (bodyParamString != null) {
            stmt.bindString(5, bodyParamString);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RequestLog readEntity(Cursor cursor, int offset) {
        RequestLog entity = new RequestLog( //
            cursor.getLong(offset + 0), // logTime
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // method
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headParamString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // bodyParamString
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RequestLog entity, int offset) {
        entity.setLogTime(cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMethod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadParamString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBodyParamString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RequestLog entity, long rowId) {
        entity.setLogTime(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RequestLog entity) {
        if(entity != null) {
            return entity.getLogTime();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
